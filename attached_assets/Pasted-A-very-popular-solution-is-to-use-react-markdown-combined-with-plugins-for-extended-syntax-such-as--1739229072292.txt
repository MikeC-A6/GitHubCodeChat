A very popular solution is to use react-markdown combined with plugins for extended syntax (such as remark-gfm) and a dedicated code renderer like react-syntax-highlighter.

Why React Markdown?
• Safe & Extensible:
react-markdown parses your markdown into a syntax tree and then renders it as React elements without using dangerouslySetInnerHTML by default. This makes it safe and easy to extend.

• TypeScript Support:
It comes with built-in TypeScript typings and works well in TypeScript projects.

• Plugins:
You can add remark-gfm (for GitHub-flavored markdown) and many other plugins to support tables, task lists, strikethrough, and more.

Handling Code Snippets
While react-markdown renders code blocks as plain <code> elements, you can override the renderer for code blocks and plug in react-syntax-highlighter to get out-of-the-box syntax highlighting. For example:

tsx
Copy
import React from 'react';
import ReactMarkdown from 'react-markdown';
import remarkGfm from 'remark-gfm';
import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';
import { oneDark } from 'react-syntax-highlighter/dist/esm/styles/prism';

const MarkdownRenderer: React.FC<{ content: string }> = ({ content }) => (
  <ReactMarkdown
    remarkPlugins={[remarkGfm]}
    components={{
      code({ node, inline, className, children, ...props }) {
        const match = /language-(\w+)/.exec(className || '');
        return !inline && match ? (
          <SyntaxHighlighter
            style={oneDark}
            language={match[1]}
            PreTag="div"
            {...props}
          >
            {String(children).replace(/\n$/, '')}
          </SyntaxHighlighter>
        ) : (
          <code className={className} {...props}>
            {children}
          </code>
        );
      }
    }}
  >
    {content}
  </ReactMarkdown>
);

export default MarkdownRenderer;
This setup gives you a fully featured markdown renderer that supports code blocks with syntax highlighting, tables, lists, and more—all in a TypeScript-friendly environment.

Alternatives
Some developers also consider markdown-to-jsx as an alternative, but many find react-markdown to be more straightforward and safer for most use cases.

Conclusion
For out-of-the-box markdown display (including code snippets) in a React/TypeScript project, the combination of react-markdown (with remark-gfm) and react-syntax-highlighter is widely regarded as one of the best and most flexible approaches.